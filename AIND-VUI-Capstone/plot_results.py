import matplotlib.pyplot as plt
import numpy as np
import seaborn

b1 = np.array([
        107.86600242710085, 79.09120143017537,
        104.9149780895433, 73.32155995900398,
        100.78645561672946, 71.09205976937973,
        101.72078987782665, 61.79177355102215,
        93.39560668251733, 55.56118314332307,
        88.32698203521309, 46.10947989264309,
        81.34351408910533, 38.28834586690373,
        77.07627281050729, 35.09494452310072,
        74.23476252777746, 32.030369900866255,
        71.74925830665914, 30.47864395215831
    ])

b2 = np.array([
    100.48041886733836, 72.853610837746,
    93.34056621660973, 53.43562405838443,
    70.83604622299372, 30.90046912872089,
    70.12519601665403, 28.816947143443194,
    63.24784282031302, 25.487659328116102,
    61.20577949858048, 23.471106219034613,
    56.36111992739767, 21.231269937717794,
    60.10720836128212, 24.13618963369515,
    53.82009056934666, 20.460485813805164,
    53.21606461414779, 20.098113656478965,
])

b3 = np.array([
    105.9257130296604, 76.19213184276694,
    100.5510974220682, 78.47804936869363,
    104.74761192395354, 73.85655276020321,
    102.18618455715531, 74.42770725580412,
    102.52124819624822, 76.26562896073435,
    101.0263602339689, 78.7896810369634,
    100.53649487485694, 77.43523507450696,
    105.53919947174005, 73.38587105428975,
    101.89052564372258, 75.8393106285571,
    101.06594932844932, 77.05356601810095,
])

b4 = np.array([
    99.14441346275264, 66.1844401019758,
    83.68852060440524, 40.000334819916034,
    76.69132210912245, 34.480315607360346,
    69.75593126263739, 29.061557718612292,
    66.30279910623281, 26.56197587448956,
    63.48116259225418, 25.73327062533509,
    57.90124154965837, 22.588288031562506,
    57.67621160521093, 22.73199713271231,
    56.06338500922416, 22.20749943406166,
    52.52975116931473, 20.621910451302764,
])


relu = b4
swish = np.array([
    92.05408665783143, 53.82278356055283,
    69.13885720440618, 28.243697138862267,
    64.894667051036, 26.587368762314128,
    57.669451839489405, 22.434586563412466,
    56.20566529677939, 22.44745627144477,
    53.384099288327306, 20.104441566709085,
    52.004957124062294, 19.671390868664044,
    51.13599145020866, 19.296404642454732,
    51.61364660142945, 19.632200424244257,
    49.58204724926648, 19.219774395554406,
])
elu = np.array([
    95.82521541894266, 58.63372687501095,
    79.56460327320134, 35.12865902339062,
    73.21779808727587, 30.365082310863325,
    67.52605185576164, 26.8060534058702,
    67.02949765538747, 26.651433098051502,
    60.54631965148617, 24.02505653449694,
    57.596434749513016, 22.499103289162694,
    57.96809531563242, 22.429109283679264,
    57.00632517109616, 21.478646831299915,
    53.13474698348772, 20.42815789552061,
])
leaky = np.array([
    94.01923164205978, 55.61796537502742,
    76.89481334526849, 32.920526916467054,
    74.39067952178625, 30.642113950853844,
    69.75719047298374, 27.261234255302583,
    65.98139370338046, 26.2451926619534,
    63.730848159026856, 25.14689259019156,
    63.935425994581266, 24.56408708532456,
    60.35013972854811, 23.227722884507447,
    58.85507688214651, 23.064172841365412,
    57.58954935463035, 21.701650822960108,
])



adam002 = np.array([
100.11363636363636, 82.22818173344928,
109.99561065790802, 74.38262130768533,
100.24223602484471, 77.7605488947943,
106.92350699409525, 72.92516461286075,
109.92257873913394, 72.64655010792619,
111.16782461119148, 73.06890034160203,
103.98970890220887, 75.25852600988443,
112.15149680356508, 72.49311991001153,
108.81207314327632, 73.01201082797498,
105.25543205733605, 74.77378838203333,
])

adam001 = np.array([
105.34394771894769, 75.98296021856166,
110.01275599214456, 74.24007770160533,
112.3146118408513, 73.28734440206964,
112.89020908278276, 72.87081519184723,
111.34587575490467, 71.53465219353605,
108.06244096483228, 72.29854393460909,
110.70818148033263, 71.82253279626202,
102.8234426866099, 71.2696848348276,
106.61753398368072, 68.43912612253132,
100.8911136621663, 68.60149295047216,
])

adam0005 = np.array([
106.00354629031101, 73.15256919677915,
102.7390429015429, 75.7300341060652,
109.13396523945558, 73.17775399419462,
100.59753709350785, 76.86451846331298,
103.72353462938503, 73.63345890160522,
104.0226909571208, 74.02198629558603,
104.72204208316629, 73.97109680995581,
99.82734201081276, 83.0299029433342,
110.29002306916826, 73.2259734562508,
106.82354986826914, 72.53228936175552,
])

adam004 = np.array([
100.0, 89.72917675741708,
107.15931290931294, 75.30755708415111,
114.68006150902622, 73.29099825441902,
104.19885710597457, 75.46982308319367,
108.3457569945236, 75.0972450743191,
110.28124216536462, 73.7509864536514,
111.29817560172873, 73.93033750722682,
115.9870475411612, 72.9732970398743,
105.44294677613199, 73.73900234335586,
108.3629944971174, 69.99559995557543,
])


ada002 = np.array([
98.03861424224273, 62.97227184047062,
86.05848312138464, 43.66717475429523,
79.54471347656839, 37.60330729021513,
75.02848360058137, 33.14672122808894,
71.85186648531358, 31.312006178754213,
70.18120139535455, 29.823471396973723,
67.83641828009226, 29.08557490492188,
67.01426701350896, 28.74212629346011,
66.18306858221176, 27.58157471820162,
64.24849608830337, 26.721283550033736,
])

ada004 = np.array([
103.7676031385739, 73.64364181611633,
106.41008942748074, 73.36409024628337,
102.60156232656233, 74.62113867061714,
110.99463117743058, 71.40434506065401,
106.45216548457927, 73.16703668308428,
102.798917319562, 74.30900849586664,
102.97851393422894, 74.09711291205137,
106.58597208124507, 72.69740945877348,
106.78460135033971, 71.91010139428425,
113.01281257600422, 71.46388189432233,
])

ada001 = np.array([
102.23455701802776, 75.58293464518032,
102.25620294456502, 73.80206313345074,
102.22732313982314, 74.44828694562487,
100.97055387141592, 73.10038718971154,
102.51475081515918, 70.42642967563404,
99.90918754887609, 68.26659850507917,
98.48352616301672, 67.39888979107722,
97.77166026941676, 63.74306791855447,
98.3805461142694, 59.55249489302713,
96.1295606404458, 56.08745361456924,
])

ada0005 = np.array([
100.07851444948521, 79.46038178406884,
100.22339466089467, 75.44031760977589,
101.29258658008658, 72.575278792608,
99.31913773630045, 69.93156526454845,
100.51446471180031, 67.3438334903937,
99.36741105448056, 65.11155455185613,
97.51525455222223, 62.45328622272475,
96.22889487919181, 58.96741301629692,
95.70224680681221, 57.113265181268936,
93.9756183455969, 55.06145091830049,
])

nonorm = np.array([
100.0, 100.0,
100.0, 100.0,
100.0, 100.0,
100.0, 100.0,
100.0, 100.0,
100.0, 100.0,
100.0, 100.0,
100.0, 100.0,
100.0, 100.0,
100.0, 100.0,
])

laynorm = np.array([
100.0, 100.0,
100.0, 95.48171624886702,
100.5, 90.93132512631409,
100.50825831672906, 89.12055698251787,
101.33333333333331, 87.72714542916539,
101.33333333333331, 86.91301102150405,
101.33333333333331, 87.01198396866492,
101.33333333333331, 86.93277595030433,
101.33333333333331, 87.75518683854419,
101.33333333333331, 87.1638940260058,
])

shallow = np.array([
88.12721155753958, 47.02932447832957,
67.76821103138346, 27.377778882662614,
64.10045483856221, 24.630200044121537,
62.41258379653455, 24.211076286581207,
59.23417729977472, 23.261834098440822,
57.81229864691442, 22.23732185237573,
57.60349997855996, 22.08553210579782,
55.97346007380381, 21.938096569162088,
56.762641318443585, 21.292735797307603,
56.35129304039573, 21.480226214124524,
])

deep = np.array([
106.13854225558082, 79.20432174647053,
101.44114774114774, 75.71848010772608,
120.01605178274556, 69.80371948693491,
106.74686770611078, 73.73162983302282,
100.4701783411491, 75.95390778202812,
100.48309239070107, 77.87480921311592,
105.23741839646571, 74.19974765476505,
101.44539062886139, 77.50509812251462,
103.52510950097158, 75.51914024851318,
105.1491040821923, 73.83277239909236,
])


mfccinput = np.array([
99.18710368297349, 77.82281136560331,
98.19196552040725, 61.00094417669437,
90.60922585724876, 47.82503201468613,
81.05575960333567, 36.149238455332785,
76.51995826103963, 34.012460580531325,
70.8302926275923, 30.100047244265216,
69.7937130887653, 28.43693585579861,
64.60843020471805, 26.51678016165953,
64.019807630107, 26.63948343751355,
61.238970544536684, 25.379844142610146,
])

mfccscaled = np.array([
105.30895909645909, 78.24292944634757,
102.47936507936507, 74.36962327847267,
112.99932573853745, 72.32405829921818,
116.48283399539734, 72.04455094205753,
125.4521438131009, 72.23855799452852,
101.48308207810496, 76.24885380792108,
100.04740757326962, 79.60478761576948,
107.16704810915786, 73.3308970426421,
108.72164216786341, 73.435825710988,
111.98396879851065, 72.65427811621078,
])

mfcchalf = np.array([
100.07675983436853, 79.67929264753651,
106.17519242195712, 73.96618997148435,
103.24118936618937, 75.70693239395806,
109.84032956626284, 72.76202279270588,
102.62929972085871, 76.26630147227041,
100.51081557331555, 78.62276163850802,
99.32752238599312, 80.96836216908477,
103.57763747408777, 75.099815234944,
101.07441504855298, 77.20433741212247,
102.5613653288576, 75.78968265270582,
])

final = np.array([
93.76920024899181, 51.28869803472057,
69.01968237236827, 29.261904232770885,
65.01446535762692, 26.420663047262988,
57.984967322406064, 22.94918748455492,
53.36613984099212, 21.121159102663277,
53.479511607471785, 20.47224202961861,
52.26824671399023, 19.585581557189425,
50.19000600319294, 19.30416218879758,
49.59446084903603, 19.39984131417144,
50.647841155893566, 18.475336657139444,
46.566824687232256, 18.032535178018712,
47.19143046008073, 18.260654064816926,
45.347168080059575, 16.92087348862849,
47.00978362536288, 18.108537724181875,
47.73053983275787, 17.919068407277305,
46.37728483000784, 17.478130387553737,
45.84805406226905, 17.57394640066821,
45.0869277357697, 17.05831854302435,
44.591478292176916, 17.256663145820585,
44.474515015041476, 17.13583482293506,
43.211307838946034, 16.368047922847605,
44.104861755306814, 16.69025746234243,
44.286021131282375, 16.84682700953623,
42.72127967891515, 15.984082186403159,
43.53971652860346, 16.483102765336955,
41.64744542739659, 16.000442753170677,
40.88850964290319, 15.812028287423596,
43.21917703236509, 16.551337339038007,
42.04123194240395, 15.855222606646317,
41.69693662521529, 16.194584744886257,
40.3478174438183, 15.615116305951233,
43.45899708249683, 16.322121528864873,
41.59166469824172, 15.680381137481525,
42.54541312416507, 16.433609069257244,
40.98477513394316, 15.914316134352978,
42.17739545488766, 15.77874385417041,
41.82911390189455, 16.258285747092135,
40.736000051558, 15.835966950942911,
43.73677748860116, 16.393609172051622,
43.50153210449525, 16.11875245893553,
41.35315742021967, 15.633990786342597,
41.26184812449024, 15.767388757118054,
41.6317256915497, 15.301414505613588,
42.40352261362425, 15.869172591796534,
41.07755832105178, 15.506900533814846,
43.26523898412877, 16.58403964129601,
41.839605355272, 15.683743058047503,
42.09172540676545, 15.34543475593549,
41.263712174500334, 15.67589528426787,
43.4282626353844, 16.470625799973703,
])


lr0005 = np.array([
40.67639305306108, 15.664161854590427,
39.83142734357626, 14.336467528191648,
39.421796100753625, 14.562222065021176,
39.228383580928295, 14.344205624884571,
40.87230218508323, 14.837401329666541,
40.11118058268814, 14.761069838937901,
39.478010722568165, 14.510475857350759,
40.30319416894, 14.833097523300644,
41.141563917055485, 14.950160933706012,
39.88707785896227, 14.77584327168862,
])

lr0001 = np.array([
38.938475254932776, 14.881500966001608,
38.83476607865722, 14.099050314510936,
39.77074878350401, 14.416838607066422,
38.46323263698925, 14.338842405839564,
39.0837664702771, 14.359058529823047,
39.03810037313821, 14.219864687410826,
38.315321561038246, 14.048024360098616,
39.02908736904628, 14.270183858230649,
39.71379871171908, 14.42275167730584,
39.052498078514425, 14.390676855505715,
])

cosine = np.array([
91.19191720076775, 50.09406054589915,
70.18321954217598, 29.567109034576024,
63.74121299442073, 25.456605562542432,
58.86868950717793, 22.21925091133413,
57.99223623346788, 21.969462722585604,
59.323011738778995, 22.166499679501044,
60.105612644550376, 23.118682240268072,
58.74725437831668, 23.064810133276296,
58.56082091364862, 23.475577704200212,
54.737685899316155, 21.859470800477585,
])

linear = np.array([
91.83946136432704, 53.63756578186268,
71.08660413561621, 29.812181612403265,
62.752057959630484, 25.44685414894372,
61.50251496011771, 24.5526945603418,
55.792279316623045, 21.88426444025571,
54.06648673973183, 21.8845668475549,
50.73997979095663, 19.642680576580428,
47.76328325903484, 18.430475566044546,
48.10086248828216, 18.096582898748167,
47.26311002474989, 18.005749031815988,
])

expo = np.array([
93.05267149748656, 51.94797850036204,
69.51994279521574, 28.57851505244897,
62.83273214353783, 25.634252503329567,
58.975780325542225, 22.604672750809105,
53.71023355431783, 21.723178702203473,
52.15642814392033, 20.164246201485977,
52.25488073921871, 19.60088970385706,
48.431378399587665, 18.19107414939527,
49.1627721528567, 19.058843698267566,
47.62521176587319, 18.407287721274606,
])
import math

def basic6():
    x = np.arange(0, 10)


    y2 = np.full(10, 1e-4) + (0.02 - 1e-4) * (1 + np.cos(math.pi * x / 4)) / 2
    y3 = 0.02 - (0.02 - 1e-4) * x/9
    y4 = 0.02 * np.power(1 - 0.01, x)

    h2 = plt.plot(x, y2, linestyle="-", color="tab:orange", label="Cosine annealing LR")
    h3 = plt.plot(x, y3, linestyle="-", color="tab:green", label="Linear decay LR")
    h4 = plt.plot(x, y4, linestyle="-", color="tab:red", label="Exp. decay LR")
    plt.xlabel('epochs')
    plt.ylabel('learning rate')
    plt.legend(handles=[h2[0], h3[0], h4[0]])
    plt.savefig("basicrun.png", bbox_inches='tight')
    plt.show()

basic6()
exit()

def basic5(y1, y2, y3, y4):
    x = np.arange(0, 10)

    h1 = plt.plot(x, y1[::2], linestyle="-", color="tab:blue", label="No annealing")
    plt.plot(x, y1[1::2], linestyle="--", color="tab:blue")
    h2 = plt.plot(x, y2[::2], linestyle="-", color="tab:orange", label="Cosine annealing")
    plt.plot(x, y2[1::2], linestyle="--", color="tab:orange")
    h3 = plt.plot(x, y3[::2], linestyle="-", color="tab:green", label="Linear decay")
    plt.plot(x, y3[1::2], linestyle="--", color="tab:green")
    h4 = plt.plot(x, y4[::2], linestyle="-", color="tab:red", label="Exp. decay")
    plt.plot(x, y4[1::2], linestyle="--", color="tab:red")
    plt.xlabel('epochs')
    plt.ylabel('percent error')
    plt.legend(handles=[h1[0], h2[0], h3[0], h4[0]])
    plt.savefig("basicrun.png", bbox_inches='tight')
    plt.show()

basic5(relu, cosine, linear, expo)
exit()



def basic4(y1,y2, y3):
    x1 = np.arange(0, 50)
    x2 = np.arange(49, 60)
    x3 = np.arange(59, 70)



    h1 = plt.plot(x1, y1[::2], linestyle="-", color="tab:red", label="LR: 0.02")
    plt.plot(x1, y1[1::2], linestyle="--", color="tab:red")
    h2 = plt.plot(x2, np.concatenate((np.array([y1[-2]]), y2[::2])), linestyle="-", color="tab:green", label="LR: 0.005")
    plt.plot(x2, np.concatenate((np.array([y1[-1]]), y2[1::2])), linestyle="--", color="tab:green")
    h3 = plt.plot(x3, np.concatenate((np.array([y2[-2]]), y3[::2])), linestyle="-", color="tab:orange", label="LR: 0.001")
    plt.plot(x3, np.concatenate((np.array([y2[-1]]), y3[1::2])), linestyle="--", color="tab:orange")


    plt.xlabel('epochs')
    plt.ylabel('percent error')
    plt.legend(handles=[h1[0], h2[0], h3[0]])
    plt.savefig("basicrun.png", bbox_inches='tight')
    plt.show()

basic4(final, lr0005, lr0001)
exit()

def basic3(y1, y2, y3,y4):
    x = np.arange(0, 10)



    h1 = plt.plot(x, y1[::2], linestyle="-", color="tab:blue", label="Spectrogram")
    plt.plot(x, y1[1::2], linestyle="--", color="tab:blue")
    h2 = plt.plot(x, y2[::2], linestyle="-", color="tab:orange", label="MFCC without scale")
    plt.plot(x, y2[1::2], linestyle="--", color="tab:orange")
    h3 = plt.plot(x, y3[::2], linestyle="-", color="tab:green", label="Scaled MFCC")
    plt.plot(x, y3[1::2], linestyle="--", color="tab:green")
    h4 = plt.plot(x, y4[::2], linestyle="-", color="tab:red", label="Partially Scaled MFCC")
    plt.plot(x, y4[1::2], linestyle="--", color="tab:red")
    plt.xlabel('epochs')
    plt.ylabel('percent error')
    plt.legend(handles=[h1[0], h2[0], h3[0], h4[0]])
    plt.savefig("basicrun.png", bbox_inches='tight')
    plt.show()

basic3(relu, mfccinput, mfccscaled, mfcchalf)
exit()

def basic2(y1, y2, y3,):
    x = np.arange(0, 10)



    h1 = plt.plot(x, y1[::2], linestyle="-", color="tab:blue", label="Normal Model")
    plt.plot(x, y1[1::2], linestyle="--", color="tab:blue")
    h2 = plt.plot(x, y2[::2], linestyle="-", color="tab:orange", label="Shallow Model")
    plt.plot(x, y2[1::2], linestyle="--", color="tab:orange")
    h3 = plt.plot(x, y3[::2], linestyle="-", color="tab:green", label="Deep Model")
    plt.plot(x, y3[1::2], linestyle="--", color="tab:green")
    plt.xlabel('epochs')
    plt.ylabel('percent error')
    plt.legend(handles=[h1[0], h2[0], h3[0]])
    plt.savefig("basicrun.png", bbox_inches='tight')
    plt.show()

basic2(relu, shallow, deep)
exit()

def basic(y1, y2, y3, y4, y5):
    x = np.arange(0, 10)



    h1 = plt.plot(x, y1[::2], linestyle="-", color="brown", label="Adagrad 0.005")
    plt.plot(x, y1[1::2], linestyle="--", color="brown")
    h2 = plt.plot(x, y2[::2], linestyle="-", color="red", label="Adagrad 0.01")
    plt.plot(x, y2[1::2], linestyle="--", color="red")
    h3 = plt.plot(x, y3[::2], linestyle="-", color="tomato", label="Adagrad 0.02")
    plt.plot(x, y3[1::2], linestyle="--", color="tomato")
    h4 = plt.plot(x, y4[::2], linestyle="-", color="chocolate", label="Adagrad 0.04")
    plt.plot(x, y4[1::2], linestyle="--", color="chocolate")
    h5 = plt.plot(x, y5[::2], linestyle="-", color="teal", label="SGD 0.02", linewidth=2.5)
    plt.plot(x, y5[1::2], linestyle="--", color="teal", linewidth=2.5)
    plt.xlabel('epochs')
    plt.ylabel('percent error')
    plt.legend(handles=[h1[0], h2[0], h3[0], h4[0], h5[0]])
    plt.savefig("basicrun.png", bbox_inches='tight')
    plt.show()

basic(ada0005, ada001, ada002, ada004, relu)

exit()

def relu(X):
    X = X.copy()
    X[X < 0] = 0
    return X

def elu(X, alpha=1.0):
    return np.where(X > 0, X, alpha * (np.exp(X) - 1))

def leakyrelu(X, alpha=0.3):
    X = X.copy()
    X[X < 0] = X[X < 0] * alpha
    return X

def swish(X, beta=1.0):
    return X / (1 + np.exp(-X*beta))

X = np.arange(-4, 4, 0.001)
Y = relu(X)
fig, ax = plt.subplots()
plt.ylim(-3, 4)
ax.plot(X, Y, "r", linewidth=3)
ax.set_aspect('equal')
ax.grid(True, which='both')

# set the x-spine (see below for more info on `set_position`)
ax.spines['left'].set_position('zero')

# turn off the right spine/ticks
ax.spines['right'].set_color('none')
ax.yaxis.tick_left()

# set the y-spine
ax.spines['bottom'].set_position('zero')

# turn off the top spine/ticks
ax.spines['top'].set_color('none')
ax.xaxis.tick_bottom()
plt.savefig("ac_relu.png", bbox_inches='tight')
plt.show()



